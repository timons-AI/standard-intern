generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// authentification models 
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
   password     String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model companies {
  company_id          Int                   @id(map: "pk_companies") @default(autoincrement())
  name                String                @db.VarChar(100)
  description         String?
  address             String?               @db.VarChar(100)
  contact             String?               @db.VarChar
  company_professions company_professions[]
  company_regions     company_regions[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_professions {
  company_profession_id Int         @id(map: "pk_company_professions") @default(autoincrement())
  company_id            Int
  profession_id         Int
  companies             companies   @relation(fields: [company_id], references: [company_id], onUpdate: NoAction,onDelete: Cascade, map: "fk_company_professions")
  professions           professions @relation(fields: [profession_id], references: [profession_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_company_professions_regions")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_regions {
  company_region_id Int       @id(map: "pk_company_regions") @default(autoincrement())
  company_id        Int
  region_id         Int
  companies         companies @relation(fields: [company_id], references: [company_id],onDelete: Cascade, onUpdate: NoAction, map: "fk_company_regions_companies")
  regions           regions   @relation(fields: [region_id], references: [region_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_company_regions_regions")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model professions {
  profession_id       Int                   @id(map: "pk_professions") @default(autoincrement())
  name                String                @db.VarChar(100)
  description         String?
  company_professions company_professions[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model regions {
  region_id       Int               @id(map: "pk_regions") @default(autoincrement())
  name            String            @db.VarChar(100)
  description     String?
  company_regions company_regions[]
}
